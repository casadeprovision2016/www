# Dockerfile para worker de background jobs
FROM node:20-alpine AS builder

RUN apk add --no-cache python3 make g++ vips-dev

WORKDIR /app

COPY package*.json ./
COPY tsconfig.json ./

RUN npm ci && npm cache clean --force

COPY src/ ./src/
COPY shared/ ./shared/

RUN npm run build

# Est√°gio final para worker
FROM node:20-alpine

RUN apk add --no-cache \
    vips \
    curl \
    tini

RUN addgroup -g 1001 -S nodejs && \
    adduser -S cccp -u 1001 -G nodejs

WORKDIR /app

COPY --from=builder --chown=cccp:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=cccp:nodejs /app/dist ./dist
COPY --from=builder --chown=cccp:nodejs /app/package*.json ./

# Script de entrada do worker usando os arquivos TypeScript compilados
COPY --chown=cccp:nodejs <<EOF /app/worker.js
const { BackgroundJobsWorker } = require('./dist/src/workers/backgroundJobs');
const { logger } = require('./dist/src/utils/logger');

async function startWorker() {
  try {
    logger.info('üöÄ Iniciando Background Jobs Worker...');
    
    // Verificar vari√°veis de ambiente necess√°rias
    const requiredEnvVars = [
      'SUPABASE_URL',
      'SUPABASE_SERVICE_ROLE_KEY',
      'REDIS_URL'
    ];

    for (const envVar of requiredEnvVars) {
      if (!process.env[envVar]) {
        throw new Error(\`Vari√°vel de ambiente \${envVar} √© obrigat√≥ria\`);
      }
    }

    // Inicializar e iniciar o worker
    const worker = new BackgroundJobsWorker();
    await worker.start();

    logger.info('‚úÖ Background Jobs Worker iniciado com sucesso');

    // Manter o processo vivo
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
    });

    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception:', error);
      process.exit(1);
    });

  } catch (error) {
    logger.error('‚ùå Erro ao iniciar worker:', error);
    process.exit(1);
  }
}

startWorker();
EOF

RUN mkdir -p logs && chown -R cccp:nodejs logs

USER cccp

ENV NODE_ENV=production

# Health check espec√≠fico para worker
HEALTHCHECK --interval=60s --timeout=10s --start-period=10s --retries=3 \
  CMD test -f /tmp/worker-health || exit 1

ENTRYPOINT ["/sbin/tini", "--"]

CMD ["node", "worker.js"]