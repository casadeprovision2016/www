#!/bin/bash
# Script de configura√ß√£o do Cloudflare Tunnel para CCCP
# Arquivo: scripts/setup-cloudflare.sh

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "üå©Ô∏è  =========================================="
    echo "   Configura√ß√£o Cloudflare Tunnel - CCCP"
    echo "==========================================${NC}"
    echo
}

# Verificar pr√©-requisitos
check_prerequisites() {
    print_status "Verificando pr√©-requisitos..."
    
    # Verificar Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker n√£o est√° instalado"
        exit 1
    fi
    
    # Verificar Docker Compose
    if ! command -v docker compose &> /dev/null; then
        print_error "Docker Compose n√£o est√° instalado"
        exit 1
    fi
    
    # Verificar se estamos no diret√≥rio correto
    if [ ! -f "docker-compose.yml" ]; then
        print_error "Execute este script na raiz do projeto CCCP"
        exit 1
    fi
    
    print_success "Pr√©-requisitos verificados"
}

# Configurar vari√°veis de ambiente
setup_environment() {
    print_status "Configurando vari√°veis de ambiente..."
    
    # Verificar se .env.production j√° existe
    if [ -f ".env.production" ]; then
        print_warning ".env.production j√° existe"
        read -p "Deseja sobrescrever? [y/N]: " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_status "Mantendo configura√ß√£o atual"
            return
        fi
    fi
    
    # Copiar template
    if [ -f ".env.cloudflare" ]; then
        cp .env.cloudflare .env.production
        print_success "Template copiado para .env.production"
    else
        print_error "Template .env.cloudflare n√£o encontrado"
        exit 1
    fi
    
    # Solicitar token do usu√°rio
    echo
    print_status "Configure o token do Cloudflare Tunnel:"
    echo "1. Acesse: https://dash.cloudflare.com"
    echo "2. V√° para: Zero Trust > Access > Tunnels"
    echo "3. Crie um novo tunnel e copie o token"
    echo
    
    read -p "Cole o token do Cloudflare Tunnel: " tunnel_token
    
    if [ -z "$tunnel_token" ]; then
        print_error "Token n√£o pode estar vazio"
        exit 1
    fi
    
    # Solicitar dom√≠nio
    read -p "Digite seu dom√≠nio (ex: cccp.suaempresa.com): " domain
    
    if [ -z "$domain" ]; then
        print_error "Dom√≠nio n√£o pode estar vazio"
        exit 1
    fi
    
    # Atualizar arquivo .env.production
    sed -i "s/your_tunnel_token_here/$tunnel_token/" .env.production
    sed -i "s/cccp.example.com/$domain/" .env.production
    sed -i "s/api.cccp.example.com/api.$domain/" .env.production
    
    print_success "Vari√°veis configuradas em .env.production"
}

# Verificar configura√ß√£o do DNS
check_dns() {
    print_status "Verificando configura√ß√£o DNS..."
    
    # Carregar dom√≠nio do arquivo .env.production
    if [ -f ".env.production" ]; then
        source .env.production
        domain=$CLOUDFLARE_DOMAIN
    else
        print_error ".env.production n√£o encontrado"
        return 1
    fi
    
    if [ -z "$domain" ]; then
        print_warning "Dom√≠nio n√£o configurado, pulando verifica√ß√£o DNS"
        return
    fi
    
    print_status "Verificando DNS para: $domain"
    
    # Verificar se o dom√≠nio resolve
    if nslookup "$domain" &> /dev/null; then
        print_success "DNS configurado para $domain"
    else
        print_warning "DNS ainda n√£o propagado para $domain"
        print_status "Configure os registros CNAME no Cloudflare:"
        echo "  $domain -> [tunnel-id].cfargotunnel.com"
        echo "  api.$domain -> [tunnel-id].cfargotunnel.com"
    fi
}

# Iniciar servi√ßos
start_services() {
    print_status "Iniciando servi√ßos..."
    
    # Verificar se os servi√ßos b√°sicos est√£o rodando
    if ! docker compose ps | grep -q "Up.*healthy"; then
        print_status "Iniciando servi√ßos b√°sicos..."
        docker compose up -d
        
        print_status "Aguardando servi√ßos ficarem saud√°veis..."
        sleep 30
    fi
    
    # Carregar vari√°veis de produ√ß√£o
    if [ -f ".env.production" ]; then
        export $(cat .env.production | grep -v '^#' | xargs)
    fi
    
    # Iniciar com perfil de produ√ß√£o
    print_status "Iniciando t√∫nel Cloudflare..."
    docker compose --profile production up -d
    
    print_success "Servi√ßos iniciados"
}

# Verificar status dos servi√ßos
check_status() {
    print_status "Verificando status dos servi√ßos..."
    
    echo
    docker compose ps
    echo
    
    # Verificar logs do t√∫nel
    print_status "Logs recentes do t√∫nel Cloudflare:"
    docker compose logs cloudflare-tunnel --tail=10
}

# Testar conectividade
test_connectivity() {
    print_status "Testando conectividade..."
    
    # Testar servi√ßos locais
    echo
    print_status "Testando servi√ßos locais:"
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/health | grep -q "200"; then
        print_success "Frontend local: OK"
    else
        print_error "Frontend local: FALHA"
    fi
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/health | grep -q "200"; then
        print_success "API local: OK"
    else
        print_error "API local: FALHA"
    fi
    
    # Testar t√∫nel (se dom√≠nio estiver configurado)
    if [ -f ".env.production" ]; then
        source .env.production
        if [ ! -z "$CLOUDFLARE_DOMAIN" ]; then
            echo
            print_status "Testando acesso p√∫blico:"
            
            if curl -s -o /dev/null -w "%{http_code}" "https://$CLOUDFLARE_DOMAIN" | grep -q "200"; then
                print_success "Acesso p√∫blico: https://$CLOUDFLARE_DOMAIN"
            else
                print_warning "Acesso p√∫blico ainda n√£o dispon√≠vel"
                print_status "Verifique:"
                print_status "1. Configura√ß√£o DNS no Cloudflare"
                print_status "2. Logs do t√∫nel: docker compose logs cloudflare-tunnel"
            fi
        fi
    fi
}

# Menu principal
show_menu() {
    echo
    print_status "Escolha uma op√ß√£o:"
    echo "1. Configura√ß√£o completa (recomendado)"
    echo "2. Apenas configurar vari√°veis"
    echo "3. Apenas iniciar servi√ßos"
    echo "4. Verificar status"
    echo "5. Testar conectividade"
    echo "6. Ver logs do t√∫nel"
    echo "7. Parar servi√ßos"
    echo "0. Sair"
    echo
    read -p "Digite sua op√ß√£o [0-7]: " choice
}

# Fun√ß√£o principal
main() {
    print_header
    
    check_prerequisites
    
    if [ $# -eq 0 ]; then
        # Modo interativo
        while true; do
            show_menu
            case $choice in
                1)
                    setup_environment
                    check_dns
                    start_services
                    check_status
                    test_connectivity
                    ;;
                2)
                    setup_environment
                    ;;
                3)
                    start_services
                    ;;
                4)
                    check_status
                    ;;
                5)
                    test_connectivity
                    ;;
                6)
                    docker compose logs cloudflare-tunnel -f
                    ;;
                7)
                    docker compose --profile production down
                    print_success "Servi√ßos parados"
                    ;;
                0)
                    print_success "Saindo..."
                    exit 0
                    ;;
                *)
                    print_error "Op√ß√£o inv√°lida"
                    ;;
            esac
            echo
            read -p "Pressione Enter para continuar..."
        done
    else
        # Modo automatizado com argumentos
        case $1 in
            "setup")
                setup_environment
                check_dns
                start_services
                check_status
                test_connectivity
                ;;
            "start")
                start_services
                ;;
            "status")
                check_status
                ;;
            "test")
                test_connectivity
                ;;
            "stop")
                docker compose --profile production down
                ;;
            *)
                echo "Uso: $0 [setup|start|status|test|stop]"
                exit 1
                ;;
        esac
    fi
}

# Executar fun√ß√£o principal
main "$@"