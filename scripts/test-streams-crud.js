

require('dotenv').config({ path: './api/.env' });
const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error('Erro: Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias.');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

const testStreamData = {
  titulo: 'Teste de Transmiss√£o ao Vivo',
  descricao: 'Esta √© uma transmiss√£o de teste gerada automaticamente.',
  url_stream: 'https://youtube.com/live/test',
  data_inicio: new Date().toISOString(),
  status: 'agendado',
  publico: true,
};

const updatedStreamData = {
  titulo: 'Teste de Transmiss√£o (Atualizado)',
  status: 'ao_vivo',
};

const runTest = async () => {
  let streamId = null;
  let testUserId = null;

  try {
    // 1. Buscar um usu√°rio para usar como 'created_by'
    console.log('Buscando usu√°rio de teste...');
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('email', 'pastor@casadeprovision.es')
      .single();

    if (userError || !userData) {
      console.error('Erro ao buscar usu√°rio de teste:', userError?.message || 'Usu√°rio pastor n√£o encontrado.');
      return;
    }
    testUserId = userData.id;
    console.log(`Usu√°rio de teste encontrado: ${testUserId}`);

    // 2. Criar a transmiss√£o
    console.log('\n--- Iniciando teste de CRIA√á√ÉO ---');
    const { data: createdStream, error: createError } = await supabase
      .from('live_streams')
      .insert({
        ...testStreamData,
        created_by: testUserId,
      })
      .select()
      .single();

    if (createError || !createdStream) {
      console.error('‚ùå FALHA NA CRIA√á√ÉO:');
      console.error(createError);
      return;
    }
    console.log('‚úÖ SUCESSO NA CRIA√á√ÉO:');
    console.log('  ID:', createdStream.id);
    console.log('  T√≠tulo:', createdStream.titulo);
    streamId = createdStream.id;

    // 3. Atualizar a transmiss√£o
    console.log(`\n--- Iniciando teste de ATUALIZA√á√ÉO para o ID: ${streamId} ---`);
    const { data: updatedStream, error: updateError } = await supabase
      .from('live_streams')
      .update(updatedStreamData)
      .eq('id', streamId)
      .select()
      .single();

    if (updateError || !updatedStream) {
      console.error('‚ùå FALHA NA ATUALIZA√á√ÉO:');
      console.error(updateError);
      return;
    }
    console.log('‚úÖ SUCESSO NA ATUALIZA√á√ÉO:');
    console.log('  T√≠tulo atualizado:', updatedStream.titulo);
    console.log('  Status atualizado:', updatedStream.status);

  } catch (error) {
    console.error('\nüö® UM ERRO INESPERADO OCORREU:');
    console.error(error);
  } finally {
    // 4. Deletar a transmiss√£o de teste
    if (streamId) {
      console.log(`\n--- Iniciando limpeza (DELE√á√ÉO) do ID: ${streamId} ---`);
      const { error: deleteError } = await supabase
        .from('live_streams')
        .delete()
        .eq('id', streamId);

      if (deleteError) {
        console.error('‚ùå FALHA NA DELE√á√ÉO:');
        console.error(deleteError);
      } else {
        console.log('‚úÖ SUCESSO NA DELE√á√ÉO.');
      }
    }
    console.log('\n--- Teste finalizado ---');
  }
};

runTest();

